<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring，多了解一点点原理</title>
    <link href="/2024/06/20/Spring%EF%BC%8C%E5%A4%9A%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9%E7%82%B9%E5%8E%9F%E7%90%86/"/>
    <url>/2024/06/20/Spring%EF%BC%8C%E5%A4%9A%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9%E7%82%B9%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring，-SpringMVC，-SpringBoot，-SpringCloud"><a href="#Spring，-SpringMVC，-SpringBoot，-SpringCloud" class="headerlink" title="Spring， SpringMVC， SpringBoot， SpringCloud"></a>Spring， SpringMVC， SpringBoot， SpringCloud</h1><table><thead><tr><th>名称</th><th>概念</th></tr></thead><tbody><tr><td>Spring</td><td>IOC反转控制</td></tr><tr><td>SpringMVC</td><td>视图模型</td></tr></tbody></table><p>在进行程序开发的时候，我们通常也会用到许多注解，但是它们通常具有不同的来源。</p><ul><li>Spring常见注解</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component、@Controller、@Service、@Repository</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@Configuration</td><td>指定当前类是一个 Spring配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 spring 在初始化容器时要扫描的包</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到spring容器中</td></tr><tr><td>@Import</td><td>使用@Import导入的类会被 Spring加载到IOC容器中</td></tr><tr><td>@Aspect、@Before、@After、@Around、@Pointcut</td><td>用于面向切面编程（AOP）</td></tr></tbody></table><ul><li>SpringMVC常见注解</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>用于映射请求路径，可以定义在类上和方法上。用于类上，则表示类中的所有的方法都是以该地址作为父路径</td></tr><tr><td>@RequestBody</td><td>注解实现接收http请求的json数据，将json转换为java对象</td></tr><tr><td>@RequestParam</td><td>指定请求参数的名称</td></tr><tr><td>@PathViriable</td><td>从请求路径下中获取请求参数(&#x2F;user&#x2F;{id})，传递给方法的形式参数</td></tr><tr><td>@ResponseBody</td><td>注解实现将controller方法返回对象转化为json对象响应给客户端</td></tr><tr><td>@RequestHeader</td><td>获取指定的请求头数据</td></tr><tr><td>@RestController</td><td>@Controller + @ResponseBody</td></tr></tbody></table><ul><li>SpringBoot常见注解</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@SpringBootConfiguration</td><td>组合了- @Configuration注解，实现配置文件的功能</td></tr><tr><td>@EnableAutoConfiguration</td><td>打开自动配置的功能，也可以关闭某个自动配置的选择</td></tr><tr><td>@ComponentScan</td><td>Spring组件扫描</td></tr></tbody></table><h1 id="SpringMVC过程"><a href="#SpringMVC过程" class="headerlink" title="SpringMVC过程"></a>SpringMVC过程</h1><ol><li>用户发送请求至前端控制器DispatcherServlet.</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器</li><li>处理器映射器找到具体的处理器(可以根据xm!配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器.</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet.</li><li> DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)</li><li>DispatcherServlet响应用户</li></ol><h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><h1 id="SpringBoot的启动原理"><a href="#SpringBoot的启动原理" class="headerlink" title="SpringBoot的启动原理"></a>SpringBoot的启动原理</h1><h1 id="IOC容器创建原理"><a href="#IOC容器创建原理" class="headerlink" title="IOC容器创建原理"></a>IOC容器创建原理</h1><h1 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h1>]]></content>
    
    
    <categories>
      
      <category>Java语言基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin语言与Andriod程序设计</title>
    <link href="/2024/06/16/Kotlin%E8%AF%AD%E8%A8%80%E4%B8%8EAndriod%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2024/06/16/Kotlin%E8%AF%AD%E8%A8%80%E4%B8%8EAndriod%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Kotlin语言"><a href="#Kotlin语言" class="headerlink" title="Kotlin语言"></a>Kotlin语言</h1><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><p>Kotlin是一门现代多平台应用的静态编程语言，2016年发布1.0的release版本</p><p>特点： 富有表现力且简洁，更安全的代码，可互操作，结构化并发（协程）</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th>类型</th><th>位宽</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>Byte</td><td>8</td><td>-128</td><td>127</td></tr><tr><td>Short</td><td>16</td><td>-32768</td><td>32767</td></tr><tr><td>Int</td><td>32</td><td>-2^31</td><td>2^31-1</td></tr><tr><td>Long</td><td>64</td><td>-2^63</td><td>2^63-1</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> number = <span class="hljs-number">100</span> <span class="hljs-comment">//默认Int</span><br><span class="hljs-keyword">val</span> bigNumber = <span class="hljs-number">8000000000</span> <span class="hljs-comment">//超过Int最大值</span><br><span class="hljs-keyword">val</span> longNumber = <span class="hljs-number">20L</span> <span class="hljs-comment">//显式设为Long</span><br><span class="hljs-keyword">val</span> byteNumber = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><table><thead><tr><th>类型</th><th>位宽</th></tr></thead><tbody><tr><td>Float</td><td>32</td></tr><tr><td>Double</td><td>64</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> doubleNumber = <span class="hljs-number">3.14</span> <span class="hljs-comment">//默认Double</span><br><span class="hljs-keyword">val</span> floatNumber = <span class="hljs-number">3.11f</span> <span class="hljs-comment">//显式Float，小数只能保留6位</span><br></code></pre></td></tr></table></figure><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>字符类型位Char，需要使用单引号表示其值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> char:<span class="hljs-built_in">Char</span> = <span class="hljs-string">&#x27;9&#x27;</span><br></code></pre></td></tr></table></figure><p>字符串类型String，可以使用[]取对应字符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> str: String = <span class="hljs-string">&quot;123456789&quot;</span><br><span class="hljs-keyword">val</span> char: <span class="hljs-built_in">Char</span> = str[<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>使用$开头可以引导字符串模板，将表达式值嵌入字符串</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">println(<span class="hljs-string">&quot;the length of string is <span class="hljs-subst">$&#123;str.length&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型只有true&#x2F;false两种值，可以显式声明或者隐式推断：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> boola:<span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">false</span><br><span class="hljs-keyword">val</span> boolb = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>初始化指定大小，不可以动态调整大小，必须指定类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> array1 = arrayOf(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-keyword">val</span> array2:Array&lt;Any&gt; = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;2&quot;</span>, JSONObject())<br></code></pre></td></tr></table></figure><p>使用arrayOfNulls创建空数组，指定大小和类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> arrayNull = arrayOfNulls&lt;String&gt;(<span class="hljs-number">5</span>)<br>arrayNull[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;123&quot;</span><br></code></pre></td></tr></table></figure><p>利用构造函数动态构造</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> asc = Array(<span class="hljs-number">5</span>) &#123;i-&gt;i*i&#125; <span class="hljs-comment">// [0,1,4,9,16]</span><br></code></pre></td></tr></table></figure><p>构建对应的数据类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> intArray = IntArray(<span class="hljs-number">5</span>) &#123;it * <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// [0,2,4,6,8], it表示数组下标</span><br></code></pre></td></tr></table></figure><p>数组的遍历</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// for-in</span><br><span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> intArray) &#123;<br>    println(item)<br>&#125;<br><span class="hljs-comment">// 下标遍历</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> intArray.indices) &#123;<br>    println(intArray[i])<br>&#125;<br><span class="hljs-comment">// 遍历下标和元素</span><br><span class="hljs-keyword">for</span> ((ix, item) <span class="hljs-keyword">in</span> intArray.withIndex()) &#123;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$ix</span> -&gt; <span class="hljs-variable">$item</span>&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 依次回调</span><br>intArray.forEach &#123;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$it</span>&quot;</span>) <span class="hljs-comment">// it代表数组元素</span><br>&#125;<br><span class="hljs-comment">// forEach增强</span><br>intArray.forEachIndexed &#123; index, item -&gt;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$index</span> : <span class="hljs-variable">$item</span>&quot;</span>) <span class="hljs-comment">// it代表数组元素</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合是可变的，大小可以动态改变。有以下常见的集合类型：</p><ol> <li>List:有序列表，可下标访问，可重复</li> <li>Set:唯一元素的结合</li> <li>Map:（字典），一组键值对</li></ol><p>集合的创建分为可变集合（创建后可以增删改查）和不可变集合（创建后增删会抛异常）</p><table><thead><tr><th>数组创建方式</th><th>示例</th><th>说明</th><th>是否可变</th></tr></thead><tbody><tr><td>arrayListOf&lt;T&gt;() <br> mutableListOf&lt;T&gt;()</td><td><code>val array = arrayListOf&lt;Int&gt;(1,2,3)</code> <br> <code>val array = mutableListOf&lt;String&gt;()</code></td><td>-必须指定元素类型</td><td>可变</td></tr><tr><td>listOf<T>()</td><td><code>val array = listOf&lt;Int&gt;(1,2,3)</code></td><td>-必须指定元素类型 <br> -必须指定初始化数据元素</td><td>不可变</td></tr><tr><td>arrayMapOf&lt;K,V&gt;() <br> mutableMapOf&lt;K,V&gt;()</td><td><code>val array = arrayMapOf(Pair(&quot;key&quot;,&quot;value&quot;))</code> <br> <code>val array = mutableMapOf()</code></td><td>-初始元素使用Pair包装</td><td>可变</td></tr><tr><td>mapOf&lt;K,V&gt;()</td><td><code>val array = listOf(Pair(&quot;key&quot;,&quot;value&quot;))</code></td><td>-元素使用Pair包装 -必须指定初始元素 <br> -必须指定初始化数据元素</td><td>不可变</td></tr><tr><td>arraySetOf&lt;T&gt;() <br> mutableSetOf&lt;T&gt;()</td><td><code>val array = arraySetOf&lt;Int&gt;(1,2,3)</code> <br> <code>val array = mutableSetOf&lt;String&gt;()</code></td><td>-会对元素自动去重</td><td>可变</td></tr><tr><td>setOf&lt;T&gt;()</td><td><code>val array = setOf&lt;Int&gt;(1,2,3)</code></td><td>-必须指定元素类型 <br> -会对元素自动去重</td><td>不可变</td></tr></tbody></table><p>集合类型的操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">isEmpty(): <span class="hljs-built_in">Boolean</span><br>contains(E): <span class="hljs-built_in">Boolean</span><br>containsAll(Collection&lt;E&gt;): <span class="hljs-built_in">Boolean</span><br><span class="hljs-keyword">get</span>(<span class="hljs-built_in">Int</span>): E <span class="hljs-comment">//可以使用[]</span><br>indexOf(E): <span class="hljs-built_in">Int</span><br>lastIndexOf(E): <span class="hljs-built_in">Int</span><br>iterator(): MutableIterator&lt;E&gt;<br>add(E): <span class="hljs-built_in">Boolean</span><br>remove(E): <span class="hljs-built_in">Boolean</span><br>addAll(Collection&lt;E&gt;): <span class="hljs-built_in">Boolean</span><br>addAll(<span class="hljs-built_in">Int</span>, Collection&lt;E&gt;, <span class="hljs-built_in">Int</span>): <span class="hljs-built_in">Boolean</span><br>removeAll(Collection&lt;E&gt;): <span class="hljs-built_in">Boolean</span><br>retainAll(Collection&lt;E&gt;): <span class="hljs-built_in">Boolean</span><br>clear(): <span class="hljs-built_in">Unit</span><br><span class="hljs-keyword">set</span>(<span class="hljs-built_in">Int</span>, E): E<br>add(<span class="hljs-built_in">Int</span>, E): <span class="hljs-built_in">Unit</span><br>removeAt(<span class="hljs-built_in">Int</span>): E<br>listIterator()： MutableListIterator&lt;E&gt;<br>listIterator(<span class="hljs-built_in">Int</span>): MutableListIterator&lt;E&gt;<br>subList(<span class="hljs-built_in">Int</span>, <span class="hljs-built_in">Int</span>): MutableList&lt;E&gt;<br>shuffle() <span class="hljs-comment">// 打乱</span><br>sort() <span class="hljs-comment">//升序排列</span><br>sortDescending() <span class="hljs-comment">//降序排列</span><br><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h3><p>方法声明包含</p><ol> <li>普通类的方法</li> <li>静态类的方法</li> <li>companion object伴生类的方法</li></ol>方法声明示例<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">max</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b:<span class="hljs-type">Int</span>)</span></span> : <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (a&gt;b) a <span class="hljs-keyword">else</span> b<br>&#125;<br></code></pre></td></tr></table></figure><p>普通类的方法声明示例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;method&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 创建对象后才能调用方法</span><br>Person().test()<br></code></pre></td></tr></table></figure><p>静态类的方法声明示例，适用于工具类的构建</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> NumUtil &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">double</span><span class="hljs-params">(num: <span class="hljs-type">Int</span>)</span></span> : <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> num * <span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">val</span> result = NumUtil.double(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>伴生类方法的声明，可以不创建普通类的实例而调用的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cotest</span><span class="hljs-params">()</span></span> &#123;<br>            println(<span class="hljs-string">&quot;companion object method&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;method&quot;</span>)<br>    &#125;<br>&#125;<br>Person.cotest() <span class="hljs-comment">//不需要创建实例</span><br></code></pre></td></tr></table></figure><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>默认参数：方法参数可以有默认值，省略相应的参数时使用默认值，相对于Java减少重载数量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">read</span><span class="hljs-params">(offset: <span class="hljs-type">Int</span>=<span class="hljs-number">0</span>, start: <span class="hljs-type">Int</span>)</span></span> &#123; <span class="hljs-comment">/* do something */</span>&#125;<br></code></pre></td></tr></table></figure><p>具名参数:使用具名参数为在默认参数后的无默认值参数赋值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">read</span><span class="hljs-params">(offset: <span class="hljs-type">Int</span>=<span class="hljs-number">0</span>, start: <span class="hljs-type">Int</span>)</span></span> &#123; <span class="hljs-comment">/* do something */</span>&#125;<br>read(start = <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>最后一个参数是方法，则既可以作为具名参数在括号内传入，也可以在方法外传入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">read</span><span class="hljs-params">(offset: <span class="hljs-type">Int</span>=<span class="hljs-number">0</span>, start: <span class="hljs-type">Int</span>, action: ()-&gt; <span class="hljs-type">Unit</span>)</span></span> &#123; <span class="hljs-comment">/* do something */</span>&#125;<br><br>read(start=<span class="hljs-number">1</span>, action= &#123;println(<span class="hljs-string">&quot;hello&quot;</span>)&#125;)<br>read(start=<span class="hljs-number">1</span>) &#123; println(<span class="hljs-string">&quot;hello&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>可变数量参数:参数（通常是最后一个）可以使用<code>vararg</code>修饰符标记。可变参数后面还有参数，可以使用具名参数的方法传入。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> str: <span class="hljs-type">Char</span>)</span></span>: String &#123;<br>    <span class="hljs-keyword">val</span> result = StringBuffer()<br>    <span class="hljs-keyword">for</span> (char <span class="hljs-keyword">in</span> str) &#123;<br>        result.append(char)<br>    &#125;<br>    <span class="hljs-keyword">return</span> result.toString()<br>&#125;<br><br><span class="hljs-keyword">val</span> world = charArrayOf(<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-keyword">val</span> result = append(<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>, *world) <span class="hljs-comment">//可以逐个传入，也可以使用数组</span><br></code></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式本质上是匿名方法，但是我们在使用时不必关心其底层实现。原始实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-keyword">public</span> void setOnClickListener(OnClickListener l) &#123;<br><br>    &#125;<br>&#125;<br><br>view.setOnClickListener(new View.OnclickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> void onClick(View view) &#123;<br>        println(<span class="hljs-string">&quot;lambda is simple&quot;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果使用Lambda表达式来进行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">view.setOnClickListener &#123;view -&gt; println(<span class="hljs-string">&quot;lambda is simple&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>it是一个高阶方法中Lambda表达式的参数只有一个参数的时候约定俗成可以使用它表示，是单个参数的隐式名称，不是保留字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> numbers = arrayOf(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)<br>numbers.forEach &#123;<br>    println(it)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><p>if的使用与Java中几乎一样，但是不同的是Kotlin中的if条件可以有返回值，即条件中每个条件的最后一行代码作为返回值，可以用if语句取代三目运算符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxOf</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br> <span class="hljs-keyword">return</span> a &gt; b ？ a: b;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用kotlin重写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">maxOf</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b:<span class="hljs-type">Int</span>)</span></span> = <span class="hljs-keyword">if</span> (a &gt; b) a <span class="hljs-keyword">else</span> b;<br></code></pre></td></tr></table></figure><p>多级if表达式，可以考虑使用when语句替代:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">eval</span><span class="hljs-params">(number: <span class="hljs-type">Number</span>)</span></span>: String = <span class="hljs-keyword">when</span> (number) &#123;<br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Byte</span> -&gt; <span class="hljs-string">&quot;this is a byte number&quot;</span><br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Short</span> -&gt; <span class="hljs-string">&quot;this is a short number&quot;</span><br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Int</span> -&gt; <span class="hljs-string">&quot;this is an int number&quot;</span><br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Long</span> -&gt; <span class="hljs-string">&quot;this is a long number&quot;</span><br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Float</span> -&gt; <span class="hljs-string">&quot;this is a float number&quot;</span><br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Long</span> -&gt; <span class="hljs-string">&quot;this is a double number&quot;</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-string">&quot;invalid number&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型接口-泛型类"><a href="#泛型接口-泛型类" class="headerlink" title="泛型接口&#x2F;泛型类"></a>泛型接口&#x2F;泛型类</h3><p>在类名，主构造函数之前使用尖括号括起来使用大写字母进行参数指定。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//泛型接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Drinks</span>&lt;<span class="hljs-type">T</span>&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">taste</span><span class="hljs-params">()</span></span> :T<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">price</span><span class="hljs-params">(t: <span class="hljs-type">T</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">//泛型类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span>&lt;<span class="hljs-type">T</span>&gt; (<span class="hljs-keyword">var</span> t: T) &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printColor</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Blue</span> &#123;<br>    <span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;blue&quot;</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlueColor</span>(t: Blue) : Color&lt;Blue&gt;(t) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printColor</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;color:<span class="hljs-subst">$&#123;t.color&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>类型参数要放在方法名的前面</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">fromJson</span><span class="hljs-params">(json: <span class="hljs-type">String</span>, tClass: <span class="hljs-type">Class</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T? &#123;<br>    <span class="hljs-keyword">val</span> t: T? = tClass.newInstance()<br>    <span class="hljs-keyword">return</span> t<br>&#125;<br><br>fromJson&lt;String&gt;（<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, String::<span class="hljs-keyword">class</span>.java）<span class="hljs-comment">//传入类的写法</span><br></code></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>限定泛型参数的类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 限定传递的类必须满足是User的子类或User类</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T: User&gt;</span> <span class="hljs-title">fromJson</span><span class="hljs-params">(json: <span class="hljs-type">String</span>, tClass: <span class="hljs-type">Class</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T? &#123; <span class="hljs-comment">/* do something */</span>&#125;<br><br><span class="hljs-comment">// 限定传递的类必须满足where的所有条件</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">fromJson</span><span class="hljs-params">(json: <span class="hljs-type">String</span>, tClass: <span class="hljs-type">Class</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T? <span class="hljs-keyword">where</span> T :User,T : Comparable&lt;T&gt; &#123; <span class="hljs-comment">/* do something */</span>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>提供架构的易用性，减少代码量，让代码更加简洁、纯粹，提高编码的效率，生产力提高</p><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><p>扩展函数可以让你作为一个类成员进行调用的函数。这样可以很方便扩展为一个已经存在的类，为它添加额外的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">lastChar</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Char</span> = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">this</span>.length -<span class="hljs-number">1</span>) <span class="hljs-comment">// 方法名前加一个类名</span><br></code></pre></td></tr></table></figure><h3 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h3><p>扩展属性提供了一种方法能通过属性语法进行访问的API来扩展。尽管被称为属性，但是不能拥有任何状态，不能添加额外的字段到现有的Java对象实例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> String.lastChar: <span class="hljs-built_in">Char</span> <span class="hljs-keyword">get</span>() = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">this</span>.length - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">val</span> &lt;T&gt;List&lt;T&gt;.last: T <span class="hljs-keyword">get</span>() = <span class="hljs-keyword">get</span>(size - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">val</span> listString = listOf(<span class="hljs-string">&quot;Andriod S&quot;</span>, <span class="hljs-string">&quot;Andriod N&quot;</span>, <span class="hljs-string">&quot;Andriod P&quot;</span>)<br>println(<span class="hljs-string">&quot;listString.last<span class="hljs-subst">$&#123;listString.last&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="伴生对象扩展"><a href="#伴生对象扩展" class="headerlink" title="伴生对象扩展"></a>伴生对象扩展</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jump</span> &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> Jump.Companion.<span class="hljs-title">print</span><span class="hljs-params">(str: <span class="hljs-type">String</span>)</span></span> &#123;<br>    println(str)<br>&#125;<br><br>Jump.print(<span class="hljs-string">&quot;compainion object extention&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="let扩展"><a href="#let扩展" class="headerlink" title="let扩展"></a>let扩展</h3><p>let扩展函数是一个作用于函数，限定一个变量在特定的作用域范围内；可以避免一些判断null的操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">testLet</span><span class="hljs-params">(str: <span class="hljs-type">String</span>?)</span></span> &#123;<br>    <span class="hljs-comment">//限制作用域</span><br>    str.let &#123;<br>        <span class="hljs-keyword">val</span> str2 = <span class="hljs-string">&quot;let&quot;</span><br>        println(it + str2)<br>    &#125;<br>    println(str2) <span class="hljs-comment">// error</span><br><br>    <span class="hljs-comment">//避免null操作</span><br>    str?.let&#123;<br>        println(it.length)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="run扩展"><a href="#run扩展" class="headerlink" title="run扩展"></a>run扩展</h3><p>run函数只接收一个Lambda函数为参数，以闭包的形式返回，返回值为最后一行的值或者指定的return的表达式，run函数中可以直接访问实例的公有属性和方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span>(<span class="hljs-keyword">val</span> address: String, <span class="hljs-keyword">val</span> price: <span class="hljs-built_in">Float</span>, <span class="hljs-keyword">val</span> size: <span class="hljs-built_in">Float</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">testRun</span><span class="hljs-params">(room: <span class="hljs-type">Room</span>)</span></span> &#123;<br>    room.run &#123;<br>        println(<span class="hljs-string">&quot;Room:<span class="hljs-variable">$address</span>, <span class="hljs-variable">$price</span>, <span class="hljs-variable">$size</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="apply扩展"><a href="#apply扩展" class="headerlink" title="apply扩展"></a>apply扩展</h3><p>调用某对象的apply函数，在函数范围内，可以调用该对象的任意方法，并返回该对象。一般用于对象实例初始化的时候，需要对对象中的属性进行赋值。或者动态inflate出一个XML的View的时候需要给View绑定数据也会用到，这种场景非常常见。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">testApply</span><span class="hljs-params">()</span></span> &#123;<br>    ArrayList&lt;String&gt;().apply &#123;<br>        add(<span class="hljs-string">&quot;test&quot;</span>Apply<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        println(&quot;</span>$<span class="hljs-keyword">this</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string">    &#125;.let &#123; println(it) &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Android四大组件"><a href="#Android四大组件" class="headerlink" title="Android四大组件"></a>Android四大组件</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>Activity是可见的部分。</p><p>所有的Activity都需要在<code>AndriodManifest.xml</code>中进行注册。注册声明放在<code>&lt;application&gt;</code>标签内，主Activity通过在<code>&lt;activity&gt;</code>标签内部加入<code>&lt;intent-filter&gt;</code>标签并在标签中添加以下声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;andriod.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;andriod.intent.category.LAUNCHER&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>Toast是Andriod提供的一种简单的提醒方式，用于传输短小的信息。Toast的使用非常简单，直接使用静态方法makeText即可,有上下文，文本内容，显示时常3个参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;text&quot;</span>, Toast.LENGTH_SHORT/Toast.LENGH_LONG).show()<br></code></pre></td></tr></table></figure><p>Intent是Android程序中各组件之间进行交互的重要方式，大致可以分为显式Intent和隐式Intent。</p><p>显式Intent重载的其中一个构造函数接收上下文和想要启动的Activity：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> intent = Intent(<span class="hljs-keyword">this</span>, SecondActivity::<span class="hljs-keyword">class</span>.java)<br>startActivity(intent)<br></code></pre></td></tr></table></figure><p>隐式Intent则不指明想要启动哪个Activity，而是通过一系列抽象的action和category信息，交由系统去分析这个Intent，并帮助找到合适的Activity去响应。需要在<code>&lt;activity&gt;</code>标签中中去设置能够响应怎样的action和category。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;andriod.intent.category.DEFAULT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;andriod.intent.category.MY_CATEGORY&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个Intent只能有一个action，但是可以有多个category。这样来让刚刚定义的Intent进行响应：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> intent = Intent(<span class="hljs-string">&quot;com.example.activitytest.ACTION_START&quot;</span>)<br>intent.addCategory(<span class="hljs-string">&quot;andriod.intent.category.MY_CATEGORY&quot;</span>)<br>startActivity(intent)<br></code></pre></td></tr></table></figure><p>使用隐式Intent，不仅可以启动自己程序内的Activity，还可以启动其他程序的Activity，例如调用系统浏览器去访问网页：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> intent = Intent(Intent.ACTION_VIEW)<br>intent.<span class="hljs-keyword">data</span> = Uri.parse(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br>startActivity(intent)<br></code></pre></td></tr></table></figure><p>在Intent中可以加入额外的数据，方便传递短小的信息</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> value = <span class="hljs-string">&quot;value&quot;</span><br>intent.putExtra(<span class="hljs-string">&quot;key&quot;</span>, value)<br></code></pre></td></tr></table></figure><p>在第二个Activity中可以取出传递的信息并且打印出来：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(saveInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>    <span class="hljs-keyword">super</span>.onCreate(saveInstanceState)<br>    setContentView(R.layout.second_layout)<br>    <span class="hljs-keyword">val</span> extraData = intent.getStringExtra(<span class="hljs-string">&quot;key&quot;</span>)<br>    Log.d(<span class="hljs-string">&quot;secondActivity&quot;</span>, <span class="hljs-string">&quot;extra data is <span class="hljs-variable">$extraData</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Activity状态"><a href="#Activity状态" class="headerlink" title="Activity状态"></a>Activity状态</h3><p>Activity在生命周期中最多会有4种状态：</p><ul><li>运行状态</li><li>暂停状态</li><li>停止状态</li><li>销毁状态</li></ul><h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p>Activity类中定义了7个回调方法，覆盖了Activity生命周期的每一个环节：</p><table><thead><tr><th>回调方法</th><th>说明</th></tr></thead><tbody><tr><td>onCreate()</td><td>第一次被创建时调用</td></tr><tr><td>onStart()</td><td>由不可见变为可见时调用</td></tr><tr><td>onResume()</td><td>准备好和用户进行交互时调用</td></tr><tr><td>onPause()</td><td>准备启动或恢复另一个Activity时调用</td></tr><tr><td>onStop()</td><td>完全不可见时调用</td></tr><tr><td>onDestroy()</td><td>销毁之前调用</td></tr><tr><td>onRestart()</td><td>由停止状态变为运行状态时调用</td></tr></tbody></table><p>除了<code>onRestart()</code>外，其余的都是两两对应的，据此又可以划分三种生存周期：</p><ul><li>完整生存期。即<code>onCreate()</code>和<code>onDestroy()</code>之间的经历。</li><li>可见生存期。即<code>onStart()</code>和<code>onStop()</code>之间的经历。</li><li>前台生存期。即<code>onResume()</code>和<code>onPause()</code>之间的经历。</li></ul><h3 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h3><ul><li>standard</li><li>singleTop</li><li>singleTask</li><li>singleInstance</li></ul><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>Service是Android中实现程序后台运行的解决方案，适合执行不需要和用户进行交互的并且需要长期运行的任务。</p><p>Service并不在独立的进程中，而是依赖于创建Service的应用程序的进程。该应用程序被杀掉时，以来它的服务也会停止。</p><p>Service 默认运行在主线城当中，因此我们需要手动创建子线程，并在其中执行具体的任务。</p><h3 id="Android多线程编程"><a href="#Android多线程编程" class="headerlink" title="Android多线程编程"></a>Android多线程编程</h3><p>Android多线程编程与Java的多线程编程有基本相同的语法。开启多线程方法也与Java类似可以新建一个类继承<code>Thread</code>，然后重写父类的<code>run()</code>方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>: <span class="hljs-type">Thread</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br><br>MyThread().start()<br></code></pre></td></tr></table></figure><p>继承的方法实现会有高耦合的情况，因此通常更多是实现<code>Runnable</code>接口来定义一个线程：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>: <span class="hljs-type">Runnable</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> myThread = MyThread()<br>Thread(myThread).start()<br></code></pre></td></tr></table></figure><p>使用Lambda表达式可以帮助我们省去重新写一个类的精力，更加方便：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Thread &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;.start()<br></code></pre></td></tr></table></figure><p>Kotlin语言还提供了更简单的方法，使用一个顶层函数，连<code>start()</code>方法都不用调用，全部在函数内部实现好了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">thread &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步消息处理机制"><a href="#异步消息处理机制" class="headerlink" title="异步消息处理机制"></a>异步消息处理机制</h3><ul><li>Message</li><li>Handler</li><li>MessageQueue</li><li>Looper</li></ul><h3 id="Service生命周期"><a href="#Service生命周期" class="headerlink" title="Service生命周期"></a>Service生命周期</h3><h2 id="BroadcastaReceiver"><a href="#BroadcastaReceiver" class="headerlink" title="BroadcastaReceiver"></a>BroadcastaReceiver</h2><h2 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h2><h1 id="Andriod-UI"><a href="#Andriod-UI" class="headerlink" title="Andriod UI"></a>Andriod UI</h1><h2 id="基础容器"><a href="#基础容器" class="headerlink" title="基础容器"></a>基础容器</h2><p>Andriod UI可以分为两类</p><ol> <li>View视图TextView，Button，ImageView都是常见的视图</li> <li>ViewGroup容器：内部可以承载、放置、添加View视图</li></ol><h3 id="LinearLayout线性布局"><a href="#LinearLayout线性布局" class="headerlink" title="LinearLayout线性布局"></a>LinearLayout线性布局</h3><p>线性布局就是从左到右或者从上到下按顺序排列的一种布局。其中基础属性：</p><table><thead><tr><th>属性</th><th>可选值</th></tr></thead><tbody><tr><td>orientation</td><td>vertical:垂直排列 <br> horizontal:水平排列</td></tr><tr><td>layout_width <br> layout_height</td><td>match_parent:填充父容器的剩余空间 <br> wrap_content:根据子视图宽高自适应自己的宽高 <br> 自定义大小50dp</td></tr><tr><td>background</td><td>#ff0000 背景色红色</td></tr><tr><td>gravity</td><td>center:所有子视图相对于父视图居中 <br> horizontal_center:所有子视图横向方向上相对于父视图居中 <br>vertical_center:所有子视图的纵向方向上相对于父视图居中显示</td></tr><tr><td>layout_gravity</td><td>center:该容器相对于它的父视图居中 <br> horizontal_center:该容器横向方向上相对于它的父视图居中 <br>vertical_center:该容器的纵向方向上相对于父视图居中显示</td></tr><tr><td>weight</td><td>按比例分配父容器剩余的宽度或高度</td></tr></tbody></table><h3 id="RelativeLayout相对布局"><a href="#RelativeLayout相对布局" class="headerlink" title="RelativeLayout相对布局"></a>RelativeLayout相对布局</h3><p>相对布局在摆放子视图位置时，按照指定参考系来摆放子视图的位置，默认以屏幕左上角（0,0）为参考系摆放位置。</p><ul><li>相对于父元素摆放自己位置的常用属性</li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_alignParentTop</td><td>true&#x2F;false</td><td>顶部对齐</td></tr><tr><td>layout_alignParentBottom</td><td>true&#x2F;false</td><td>底部对齐</td></tr><tr><td>layout_alignParentLeft</td><td>true&#x2F;false</td><td>左边对齐</td></tr><tr><td>layout_alignParentRight</td><td>true&#x2F;false</td><td>右边对齐</td></tr><tr><td>layout_centerHorizontal</td><td>true&#x2F;false</td><td>水平居中显示</td></tr><tr><td>layout_centerVertical</td><td>true&#x2F;false</td><td>垂直居中显示</td></tr><tr><td>centerInParent</td><td>true&#x2F;false</td><td>居中显示</td></tr></tbody></table><ul><li>相对于兄弟元素摆放自己位置的4个常用属性</li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_above</td><td>@+id&#x2F;</td><td>指定控件的上方</td></tr><tr><td>layout_below</td><td>@+id&#x2F;</td><td>指定控件的下方</td></tr><tr><td>layout_toLeftOf</td><td>@+id&#x2F;</td><td>指定控件的左侧</td></tr><tr><td>layout_toRightOf</td><td>@+id&#x2F;</td><td>指定控件的右侧</td></tr></tbody></table><ul><li>相对于兄弟元素的对齐方式</li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_alignLeft</td><td>@+id&#x2F;</td><td>该控件左边沿与指定控件的左边对齐</td></tr><tr><td>layout_alignRight</td><td>@+id&#x2F;</td><td>该控件右边沿与指定控件的右边对齐</td></tr><tr><td>layout_alignTop</td><td>@+id&#x2F;</td><td>该控件上边沿与指定控件的上边对齐</td></tr><tr><td>layout_alignBottom</td><td>@+id&#x2F;</td><td>该控件下边沿与指定控件的下边对齐</td></tr></tbody></table><h3 id="FrameLayout帧布局"><a href="#FrameLayout帧布局" class="headerlink" title="FrameLayout帧布局"></a>FrameLayout帧布局</h3><p>组件默认位置为左上角，组件之间可以重叠。像千层饼一样，一层压着一层。</p><ul><li>常用属性</li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_gravity</td><td>center&#x2F;center_vertical&#x2F;center_horizontal</td><td>相对于父容器的位置</td></tr><tr><td>layout_marginLeft</td><td>具体数值dp</td><td>指定控件的下方</td></tr><tr><td>layout_marginTop</td><td>具体数值dp</td><td>指定控件的左侧</td></tr><tr><td>layout_marginRight</td><td>具体数值dp</td><td>指定控件的右侧</td></tr><tr><td>layout_marginBottom</td><td>具体数值dp</td><td>指定控件的右侧</td></tr></tbody></table><h2 id="基础控件"><a href="#基础控件" class="headerlink" title="基础控件"></a>基础控件</h2><h3 id="TextView文本"><a href="#TextView文本" class="headerlink" title="TextView文本"></a>TextView文本</h3><h3 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h3><p>使用MaterialButton需要引入依赖</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">com.google.andriod.material:material:<span class="hljs-number">1.3</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>并且需要使用特定的主题:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">andriod:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot;<br></code></pre></td></tr></table></figure><p>常用属性</p><table><thead><tr><th>属性</th><th>描述</th><th>参数</th></tr></thead><tbody><tr><td>app:backgroundTint</td><td>背景着色</td><td></td></tr><tr><td>app:backgroundTint</td><td>背景着色</td><td></td></tr><tr><td>app:backgroundTint</td><td>背景着色</td><td></td></tr><tr><td>app:backgroundTint</td><td>背景着色</td><td></td></tr><tr><td>app:backgroundTint</td><td>背景着色</td><td></td></tr></tbody></table><h3 id="ImageView图像"><a href="#ImageView图像" class="headerlink" title="ImageView图像"></a>ImageView图像</h3><h2 id="高级控件"><a href="#高级控件" class="headerlink" title="高级控件"></a>高级控件</h2><h1 id="Android数据存储"><a href="#Android数据存储" class="headerlink" title="Android数据存储"></a>Android数据存储</h1><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><h2 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h2><h1 id="Android网络编程"><a href="#Android网络编程" class="headerlink" title="Android网络编程"></a>Android网络编程</h1><h2 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h2><h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo-GitHub搭建个人的博客页面</title>
    <link href="/2024/06/15/%E4%BD%BF%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/"/>
    <url>/2024/06/15/%E4%BD%BF%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo-github的原因"><a href="#使用hexo-github的原因" class="headerlink" title="使用hexo+github的原因"></a>使用hexo+github的原因</h1><ul><li><p>支持markdown格式，这样对于我这样完全不熟悉前端的人可以轻松编写包含代码块的文档，轻松实现技术的分享。</p></li><li><p>使用github的服务器，也使得我的内容更加易于分享。并且不用担心本地的站点被删除。</p></li><li><p>本文记录自己在搭建个人博客的一些过程和遇到的一些坑，并且记录相关的命令方便查阅。</p></li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>因为需要利用github服务器的资源搭载的相关功能，所以首先应当申请有个人的github账号。登陆<a href="https://www.github.com/">github官网</a>进行相应的注册即可。</p><h2 id="安装git和node-js"><a href="#安装git和node-js" class="headerlink" title="安装git和node.js"></a>安装git和node.js</h2><p>程序员朋友对于git都不陌生。因为我们需要使用github托管我们的前端静态资源，因此需要用到git，前端引擎使用的是node.js同样需要安装。</p><p>在mac环境中，可以使用homebrew来安装git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure><p>同样使用homebrew安装nvm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nvm<br></code></pre></td></tr></table></figure><p>安装完成后，配置环境变量。使用下面的命令编辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p>在其中添加以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> NVM_DIR=~/.nvm<br><span class="hljs-built_in">source</span> $(brew --prefix nvm)/nvm.sh<br></code></pre></td></tr></table></figure><p>生效环境变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>安装node.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install &lt;version&gt;<br></code></pre></td></tr></table></figure><h2 id="本地连接github"><a href="#本地连接github" class="headerlink" title="本地连接github"></a>本地连接github</h2><p>由于现在github已经不再支持使用账号+密码的方式进行连接和安全验证（会被拒绝访问），因此我们使用ssh密钥的方式来连接。</p><p>打开终端，使用下列命令来在本地配置git的账号和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&lt;github_username&gt;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&lt;github_email&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;&lt;github_email&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建后找到提示的路径地址，复制其中所有的内容。登陆github，找到自己的profile-&gt;setting，在SSH and GPG keys中找到add SSH key，将刚刚生成的密钥复制过来。</p><p>可以使用以下命令测试是否能够完成和服务器之间的连接。若提示中出现<code>...You&#39;ve successfully authenticated...</code>等内容就说明能够完成连接。可能附加还会提示不允许shell连接之类的，不用去管。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh git@github.com<br></code></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>hexo部分的内容可以参考<a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a>和<a href="https://hexo.io/themes/">hexo官方主题</a>。</p><p>为了方便我们管理，我们可以用命令<code>mkdir blog</code>创建一个文件夹来存放文件和素材。</p><p>可以使用以下命令安装hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>使用<code>hexo -v</code>来验证是否安装成功。</p><p>之后我们进入目录<code>cd blog</code>，进行初始化操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br>npm install<br></code></pre></td></tr></table></figure><p>执行完这些操作之后，就会有目录结构。然后我们生成并且启动服务器，就可以在本地<a href="localhost:4000"><code>localhost:4000</code></a>访问hexo页面啦：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在官方的主题页面<a href="https://hexo.io/themes/">Themes | Hexo</a>中选择一个喜欢的主题（fluid为例），找到其主题的官方文档和github仓库。可以使用以下命令直接安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在博客页面创建一个文件<code>touch _config.fluid.yml</code>，将目标主题github文档中<code>_config.yml</code>的内容复制进去。</p><p>修改<code>blog/_config.yml</code>文件内容来指定主题：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">&lt;theme_name&gt;</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>首次使用主题的关于页需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改<code>/source/about/index.md</code>，添加<code>layout</code>属性。</p><h2 id="部署到github服务器"><a href="#部署到github服务器" class="headerlink" title="部署到github服务器"></a>部署到github服务器</h2><p>完成本地部署后我们要考虑如何部署到GitHub服务器上。进入我们github的个人页面，点击右上角加号，选择new repository，创建一个新的仓库，仓库名建议为<code>&lt;username&gt;.github.io</code>，访问权限选择<code>public</code>，勾选<code>add a README file</code>，点击创建仓库。</p><p>修改<code>_config.yml</code>最后几行的内容。访问仓库地址可能需要特定的令牌，在个人信息页可能可以找到。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: One-Command Deployment</span><br><span class="hljs-attr">deploy:</span> <br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://&lt;TOKEN&gt;@github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>保存后运行，运行一次<code>hexo d</code>命令将静态文件推送到服务器，等待一段时间，个人博客<code>&lt;username&gt;.github.io</code>即可访问了。</p><h1 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h1><p>搭建好博客之后，接下来要做的就是产出内容，做好分享啦。</p><p>不过有时候时间隔得稍微长了，我们就会对于hexo命令记忆不清了。这时候，可以来这里快捷地查看相关的命令，方便我们快速维护。</p><ul><li><p>创建新的博客，新的博客会在<code>source/_posts/</code>路径下，之后按照markdown的方法编写即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;&lt;blog_name&gt;&quot;</span><br>hexo new post <span class="hljs-string">&quot;&lt;blog_name&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>开启本地的hexo服务器，本地访问地址为<a href="localhost:4000"><code>localhost:4000</code></a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br>hexo server<br></code></pre></td></tr></table></figure></li><li><p>编译md文件为前端的静态资源，下面两种写法是一致的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo generate<br></code></pre></td></tr></table></figure></li><li><p>将资源部署到服务器端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br>hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>清除缓存文件<code>db.json</code>和已生成的静态文件<code>public</code>，有时候更改不生效时可以尝试先清除再重新生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl<br>hexo clean<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>基础配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AIGC：姿势引导的人物图像合成</title>
    <link href="/2024/04/04/AIGC%EF%BC%9A%E5%A7%BF%E5%8A%BF%E5%BC%95%E5%AF%BC%E7%9A%84%E4%BA%BA%E7%89%A9%E5%9B%BE%E5%83%8F%E5%90%88%E6%88%90/"/>
    <url>/2024/04/04/AIGC%EF%BC%9A%E5%A7%BF%E5%8A%BF%E5%BC%95%E5%AF%BC%E7%9A%84%E4%BA%BA%E7%89%A9%E5%9B%BE%E5%83%8F%E5%90%88%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>这篇文章主要是简单介绍一下我们的工作《DNAF: Diffusion with Noise-Aware Feature for Pose-Guided Person Image Synthesis》，目前已经被ICME 2024接收，<a href="https://github.com/WillowKaze/DNAF">仓库地址</a>,我打算等正式见刊后公布论文地址，同时将完整的模型代码和训练代码公布。</p><h1 id="什么是姿势引导的人物图像合成"><a href="#什么是姿势引导的人物图像合成" class="headerlink" title="什么是姿势引导的人物图像合成"></a>什么是姿势引导的人物图像合成</h1><p>姿势引导的人物图像合成(Pose-Guided Person Image Synthesis, PGPIS)任务是一类图像生成任务。需要用户指定一张源图像：</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java线程同步-交替打印究竟有多少种写法？</title>
    <link href="/2024/04/04/Java%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9F/"/>
    <url>/2024/04/04/Java%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>多线程编程中的线程同步问题是必须要解决的一个问题，在Java中的<code>synchronized</code>关键字以及juc框架为我们提供了多种线程同步方案来应对不同的线程同步需求和场景。</p><p>本文以经典练习题：轮流按序打印为例，展示线程同步在java语言中的多种实现方法。</p><ul><li><p>使用<code>synchronized</code>关键字以及<code>wait()/notify()</code>方法<br>这是最常想到的方法，使用一个同步信号量来给各个线程判断自己是否能够进行操作还是挂起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintABC</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printA</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printB</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printC</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printA).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printB).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printC).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLetter</span><span class="hljs-params">(<span class="hljs-type">char</span> letter, <span class="hljs-type">int</span> threadId)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">while</span> (count % <span class="hljs-number">3</span> != threadId) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        Thread.currentThread().interrupt();<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>                System.out.print(letter);<br>                count++;<br>                lock.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>ReentrantLock</code>和<code>Condition</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintABCUsingLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">conditionA</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">conditionB</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">conditionC</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printA</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>, conditionA, conditionB);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printB</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">1</span>, conditionB, conditionC);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printC</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">2</span>, conditionC, conditionA);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printA).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printB).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printC).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLetter</span><span class="hljs-params">(<span class="hljs-type">char</span> letter, <span class="hljs-type">int</span> threadId, Condition currentCondition, Condition nextCondition)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (count % <span class="hljs-number">3</span> != threadId) &#123;<br>                    currentCondition.await();<br>                &#125;<br>                System.out.print(letter);<br>                count++;<br>                nextCondition.signal();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                Thread.currentThread().interrupt();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Semaphore</code>信号量<br>信号量常用于资源不止一个的场景中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintABCUsingSemaphore</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printA</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;A&#x27;</span>, semA, semB);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printB</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;B&#x27;</span>, semB, semC);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printC</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;C&#x27;</span>, semC, semA);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printA).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printB).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printC).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLetter</span><span class="hljs-params">(<span class="hljs-type">char</span> letter, Semaphore currentSemaphore, Semaphore nextSemaphore)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                currentSemaphore.acquire();<br>                System.out.print(letter);<br>                nextSemaphore.release();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                Thread.currentThread().interrupt();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>AtomicInteger</code>和<code>spin-wait</code>自旋锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintABCUsingAtomic</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printA</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printB</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printC</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printA).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printB).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printC).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLetter</span><span class="hljs-params">(<span class="hljs-type">char</span> letter, <span class="hljs-type">int</span> threadId)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">while</span> (count.get() % <span class="hljs-number">3</span> != threadId) &#123;<br>                <span class="hljs-comment">// Busy wait</span><br>            &#125;<br>            System.out.print(letter);<br>            count.incrementAndGet();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>CountDownLatch</code>记数锁<br>巧妙设计计数锁同样能够让我们实现该功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintABCUsingCountDownLatch</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THREAD_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latchA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latchB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latchC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printA</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;A&#x27;</span>, latchA, latchB);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printB</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;B&#x27;</span>, latchB, latchC);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">printC</span> <span class="hljs-operator">=</span> () -&gt; printLetter(<span class="hljs-string">&#x27;C&#x27;</span>, latchC, latchA);<br><br>        latchA.countDown(); <span class="hljs-comment">// Start the sequence by releasing the first latch</span><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printA).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printB).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(printC).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLetter</span><span class="hljs-params">(<span class="hljs-type">char</span> letter, CountDownLatch currentLatch, CountDownLatch nextLatch)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                currentLatch.await();<br>                System.out.print(letter);<br>                nextLatch.countDown();<br>                currentLatch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// Reset the latch for the next round</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                Thread.currentThread().interrupt();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java语言基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>风柳轩记</title>
    <link href="/2024/04/03/%E9%A3%8E%E6%9F%B3%E8%BD%A9%E8%AE%B0/"/>
    <url>/2024/04/03/%E9%A3%8E%E6%9F%B3%E8%BD%A9%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>朋友们，你们好呀！我是昔年种柳，这里是风柳轩，愿与诸君同听柳林风声。</p><h2 id="我为什么开始写博客"><a href="#我为什么开始写博客" class="headerlink" title="我为什么开始写博客"></a>我为什么开始写博客</h2><p>我觉得，作为一个计算机人，拥有自己的博客记录自己的学习的诸多心得与体会，是一件十分重要的事情。</p><h2 id="我会更新哪些内容"><a href="#我会更新哪些内容" class="headerlink" title="我会更新哪些内容"></a>我会更新哪些内容</h2><p>姜太公在此，百无禁忌！<br>毫无疑问，在技术上，我是新人，但是有诸多我容易忘记的，需要记忆背诵的，深入阅读源码的诸多工具，有自己的心得体会的，都会在此更新。<br>在学术上的遇到的好玩的模型的运行，部署，有意思的技术我自己去尝试的，都会在这里与大家分享！<br>参加学术会议，面试求职的各种心得体会，也可以在这里悄悄与大家分享！</p><p>愿少年，乘风破浪，他日不忘化雨功！</p>]]></content>
    
    
    <categories>
      
      <category>说点心里话</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈梦呓</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
