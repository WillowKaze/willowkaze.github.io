<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring，多了解一点点原理</title>
    <link href="/2024/06/20/Spring%EF%BC%8C%E5%A4%9A%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9%E7%82%B9%E5%8E%9F%E7%90%86/"/>
    <url>/2024/06/20/Spring%EF%BC%8C%E5%A4%9A%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9%E7%82%B9%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring，-SpringMVC，-SpringBoot，-SpringCloud"><a href="#Spring，-SpringMVC，-SpringBoot，-SpringCloud" class="headerlink" title="Spring， SpringMVC， SpringBoot， SpringCloud"></a>Spring， SpringMVC， SpringBoot， SpringCloud</h1><table><thead><tr><th>名称</th><th>概念</th></tr></thead><tbody><tr><td>Spring</td><td>IOC反转控制</td></tr><tr><td>SpringMVC</td><td>视图模型</td></tr></tbody></table><p>在进行程序开发的时候，我们通常也会用到许多注解，但是它们通常具有不同的来源。</p><ul><li>Spring常见注解</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component、@Controller、@Service、@Repository</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@Configuration</td><td>指定当前类是一个 Spring配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 spring 在初始化容器时要扫描的包</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到spring容器中</td></tr><tr><td>@Import</td><td>使用@Import导入的类会被 Spring加载到IOC容器中</td></tr><tr><td>@Aspect、@Before、@After、@Around、@Pointcut</td><td>用于面向切面编程（AOP）</td></tr></tbody></table><ul><li>SpringMVC常见注解</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>用于映射请求路径，可以定义在类上和方法上。用于类上，则表示类中的所有的方法都是以该地址作为父路径</td></tr><tr><td>@RequestBody</td><td>注解实现接收http请求的json数据，将json转换为java对象</td></tr><tr><td>@RequestParam</td><td>指定请求参数的名称</td></tr><tr><td>@PathViriable</td><td>从请求路径下中获取请求参数(&#x2F;user&#x2F;{id})，传递给方法的形式参数</td></tr><tr><td>@ResponseBody</td><td>注解实现将controller方法返回对象转化为json对象响应给客户端</td></tr><tr><td>@RequestHeader</td><td>获取指定的请求头数据</td></tr><tr><td>@RestController</td><td>@Controller + @ResponseBody</td></tr></tbody></table><ul><li>SpringBoot常见注解</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@SpringBootConfiguration</td><td>组合了- @Configuration注解，实现配置文件的功能</td></tr><tr><td>@EnableAutoConfiguration</td><td>打开自动配置的功能，也可以关闭某个自动配置的选择</td></tr><tr><td>@ComponentScan</td><td>Spring组件扫描</td></tr></tbody></table><h1 id="SpringMVC过程"><a href="#SpringMVC过程" class="headerlink" title="SpringMVC过程"></a>SpringMVC过程</h1><ol><li>用户发送请求至前端控制器DispatcherServlet.</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器</li><li>处理器映射器找到具体的处理器(可以根据xm!配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器.</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet.</li><li> DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)</li><li>DispatcherServlet响应用户</li></ol><h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><h1 id="SpringBoot的启动原理"><a href="#SpringBoot的启动原理" class="headerlink" title="SpringBoot的启动原理"></a>SpringBoot的启动原理</h1><h1 id="IOC容器创建原理"><a href="#IOC容器创建原理" class="headerlink" title="IOC容器创建原理"></a>IOC容器创建原理</h1><h1 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h1>]]></content>
    
    
    <categories>
      
      <category>Java语言基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin语言与Andriod程序设计</title>
    <link href="/2024/06/16/Kotlin%E8%AF%AD%E8%A8%80%E4%B8%8EAndriod%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2024/06/16/Kotlin%E8%AF%AD%E8%A8%80%E4%B8%8EAndriod%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Kotlin语言"><a href="#Kotlin语言" class="headerlink" title="Kotlin语言"></a>Kotlin语言</h1><p>等待资料补充</p><h1 id="Android四大组件"><a href="#Android四大组件" class="headerlink" title="Android四大组件"></a>Android四大组件</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>Activity是可见的部分。</p><p>所有的Activity都需要在<code>AndriodManifest.xml</code>中进行注册。注册声明放在<code>&lt;application&gt;</code>标签内，主Activity通过在<code>&lt;activity&gt;</code>标签内部加入<code>&lt;intent-filter&gt;</code>标签并在标签中添加以下声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;andriod.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">andriod:name</span>=<span class="hljs-string">&quot;andriod.intent.category.LAUNCHER&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>Toast是Andriod提供的一种简单的提醒方式，用于传输短小的信息。Toast的使用非常简单，直接使用静态方法makeText即可,有上下文，文本内容，显示时常3个参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;text&quot;</span>, Toast.LENGTH_SHORT/Toast.LENGH_LONG).show()<br></code></pre></td></tr></table></figure><p>Intent是Android程序中各组件</p><h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><h3 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h3><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="Service生命周期"><a href="#Service生命周期" class="headerlink" title="Service生命周期"></a>Service生命周期</h3><h2 id="BroadcastaReceiver"><a href="#BroadcastaReceiver" class="headerlink" title="BroadcastaReceiver"></a>BroadcastaReceiver</h2><h2 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h2><h1 id="Android-UI"><a href="#Android-UI" class="headerlink" title="Android UI"></a>Android UI</h1><h1 id="Android数据存储"><a href="#Android数据存储" class="headerlink" title="Android数据存储"></a>Android数据存储</h1><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><h2 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h2><h1 id="Android网络编程"><a href="#Android网络编程" class="headerlink" title="Android网络编程"></a>Android网络编程</h1><h2 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h2><h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo-GitHub搭建个人的博客页面</title>
    <link href="/2024/06/15/%E4%BD%BF%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/"/>
    <url>/2024/06/15/%E4%BD%BF%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo-github的原因"><a href="#使用hexo-github的原因" class="headerlink" title="使用hexo+github的原因"></a>使用hexo+github的原因</h1><ul><li><p>支持markdown格式，这样对于我这样完全不熟悉前端的人可以轻松编写包含代码块的文档，轻松实现技术的分享。</p></li><li><p>使用github的服务器，也使得我的内容更加易于分享。并且不用担心本地的站点被删除。</p></li><li><p>本文记录自己在搭建个人博客的一些过程和遇到的一些坑，并且记录相关的命令方便查阅。</p></li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>因为需要利用github服务器的资源搭载的相关功能，所以首先应当申请有个人的github账号。登陆<a href="https://www.github.com/">github官网</a>进行相应的注册即可。</p><h2 id="安装git和node-js"><a href="#安装git和node-js" class="headerlink" title="安装git和node.js"></a>安装git和node.js</h2><p>程序员朋友对于git都不陌生。因为我们需要使用github托管我们的前端静态资源，因此需要用到git，前端引擎使用的是node.js同样需要安装。</p><p>在mac环境中，可以使用homebrew来安装git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure><p>同样使用homebrew安装nvm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nvm<br></code></pre></td></tr></table></figure><p>安装完成后，配置环境变量。使用下面的命令编辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p>在其中添加以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> NVM_DIR=~/.nvm<br><span class="hljs-built_in">source</span> $(brew --prefix nvm)/nvm.sh<br></code></pre></td></tr></table></figure><p>生效环境变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>安装node.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install &lt;version&gt;<br></code></pre></td></tr></table></figure><h2 id="本地连接github"><a href="#本地连接github" class="headerlink" title="本地连接github"></a>本地连接github</h2><p>由于现在github已经不再支持使用账号+密码的方式进行连接和安全验证（会被拒绝访问），因此我们使用ssh密钥的方式来连接。</p><p>打开终端，使用下列命令来在本地配置git的账号和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&lt;github_username&gt;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&lt;github_email&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;&lt;github_email&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建后找到提示的路径地址，复制其中所有的内容。登陆github，找到自己的profile-&gt;setting，在SSH and GPG keys中找到add SSH key，将刚刚生成的密钥复制过来。</p><p>可以使用以下命令测试是否能够完成和服务器之间的连接。若提示中出现<code>...You&#39;ve successfully authenticated...</code>等内容就说明能够完成连接。可能附加还会提示不允许shell连接之类的，不用去管。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh git@github.com<br></code></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>hexo部分的内容可以参考<a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a>和<a href="https://hexo.io/themes/">hexo官方主题</a>。</p><p>为了方便我们管理，我们可以用命令<code>mkdir blog</code>创建一个文件夹来存放文件和素材。</p><p>可以使用以下命令安装hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>使用<code>hexo -v</code>来验证是否安装成功。</p><p>之后我们进入目录<code>cd blog</code>，进行初始化操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br>npm install<br></code></pre></td></tr></table></figure><p>执行完这些操作之后，就会有目录结构。然后我们生成并且启动服务器，就可以在本地<a href="localhost:4000"><code>localhost:4000</code></a>访问hexo页面啦：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在官方的主题页面<a href="https://hexo.io/themes/">Themes | Hexo</a>中选择一个喜欢的主题（fluid为例），找到其主题的官方文档和github仓库。可以使用以下命令直接安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在博客页面创建一个文件<code>touch _config.fluid.yml</code>，将目标主题github文档中<code>_config.yml</code>的内容复制进去。</p><p>修改<code>blog/_config.yml</code>文件内容来指定主题：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">&lt;theme_name&gt;</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>首次使用主题的关于页需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改<code>/source/about/index.md</code>，添加<code>layout</code>属性。</p><h2 id="部署到github服务器"><a href="#部署到github服务器" class="headerlink" title="部署到github服务器"></a>部署到github服务器</h2><p>完成本地部署后我们要考虑如何部署到GitHub服务器上。进入我们github的个人页面，点击右上角加号，选择new repository，创建一个新的仓库，仓库名建议为<code>&lt;username&gt;.github.io</code>，访问权限选择<code>public</code>，勾选<code>add a README file</code>，点击创建仓库。</p><p>修改<code>_config.yml</code>最后几行的内容。访问仓库地址可能需要特定的令牌，在个人信息页可能可以找到。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: One-Command Deployment</span><br><span class="hljs-attr">deploy:</span> <br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://&lt;TOKEN&gt;@github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>保存后运行，运行一次<code>hexo d</code>命令将静态文件推送到服务器，等待一段时间，个人博客<code>&lt;username&gt;.github.io</code>即可访问了。</p><h1 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h1><p>搭建好博客之后，接下来要做的就是产出内容，做好分享啦。</p><p>不过有时候时间隔得稍微长了，我们就会对于hexo命令记忆不清了。这时候，可以来这里快捷地查看相关的命令，方便我们快速维护。</p><ul><li><p>创建新的博客，新的博客会在<code>source/_posts/</code>路径下，之后按照markdown的方法编写即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;&lt;blog_name&gt;&quot;</span><br>hexo new post <span class="hljs-string">&quot;&lt;blog_name&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>开启本地的hexo服务器，本地访问地址为<a href="localhost:4000"><code>localhost:4000</code></a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br>hexo server<br></code></pre></td></tr></table></figure></li><li><p>编译md文件为前端的静态资源，下面两种写法是一致的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo generate<br></code></pre></td></tr></table></figure></li><li><p>将资源部署到服务器端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br>hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>清除缓存文件<code>db.json</code>和已生成的静态文件<code>public</code>，有时候更改不生效时可以尝试先清除再重新生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl<br>hexo clean<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>基础配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AIGC：姿势引导的人物图像合成</title>
    <link href="/2024/04/04/AIGC%EF%BC%9A%E5%A7%BF%E5%8A%BF%E5%BC%95%E5%AF%BC%E7%9A%84%E4%BA%BA%E7%89%A9%E5%9B%BE%E5%83%8F%E5%90%88%E6%88%90/"/>
    <url>/2024/04/04/AIGC%EF%BC%9A%E5%A7%BF%E5%8A%BF%E5%BC%95%E5%AF%BC%E7%9A%84%E4%BA%BA%E7%89%A9%E5%9B%BE%E5%83%8F%E5%90%88%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>这篇文章主要是简单介绍一下我们的工作《DNAF: Diffusion with Noise-Aware Feature for Pose-Guided Person Image Synthesis》，目前已经被ICME 2024接收，<a href="https://github.com/WillowKaze/DNAF">仓库地址</a>,我打算等正式见刊后公布论文地址，同时将完整的模型代码和训练代码公布。</p><h1 id="什么是姿势引导的人物图像合成"><a href="#什么是姿势引导的人物图像合成" class="headerlink" title="什么是姿势引导的人物图像合成"></a>什么是姿势引导的人物图像合成</h1><p>姿势引导的人物图像合成(Pose-Guided Person Image Synthesis, PGPIS)任务是一类图像生成任务。需要用户指定一张源图像：</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java线程同步-交替打印究竟有多少种写法？</title>
    <link href="/2024/04/04/Java%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9F/"/>
    <url>/2024/04/04/Java%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>多线程编程中的线程同步问题是必须要解决的一个问题，在Java中的<code>synchronized</code>关键字以及juc框架为我们提供了多种线程同步方案来应对不同的线程同步需求和场景。</p><p>本文以经典练习题：轮流按序打印为例，展示线程同步在java语言中的多种实现方法。</p><ul><li><p>使用<code>synchronized</code>关键字以及<code>wait()/notify()</code>方法<br>这是最常想到的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>ReentrantLock</code>和<code>Condition</code></p></li><li><p>使用</p></li><li><p><code>Semaphore</code>信号量<br>信号量常用于资源不止一个的场景中。</p></li><li><p>CountDownLatch记数锁<br>使用</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java语言基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>风柳轩记</title>
    <link href="/2024/04/03/%E9%A3%8E%E6%9F%B3%E8%BD%A9%E8%AE%B0/"/>
    <url>/2024/04/03/%E9%A3%8E%E6%9F%B3%E8%BD%A9%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>朋友们，你们好呀！我是昔年种柳，这里是风柳轩，愿与诸君同听柳林风声。</p><h2 id="我为什么开始写博客"><a href="#我为什么开始写博客" class="headerlink" title="我为什么开始写博客"></a>我为什么开始写博客</h2><p>我觉得，作为一个计算机人，拥有自己的博客记录自己的学习的诸多心得与体会，是一件十分重要的事情。</p><h2 id="我会更新哪些内容"><a href="#我会更新哪些内容" class="headerlink" title="我会更新哪些内容"></a>我会更新哪些内容</h2><p>姜太公在此，百无禁忌！<br>毫无疑问，在技术上，我是新人，但是有诸多我容易忘记的，需要记忆背诵的，深入阅读源码的诸多工具，有自己的心得体会的，都会在此更新。<br>在学术上的遇到的好玩的模型的运行，部署，有意思的技术我自己去尝试的，都会在这里与大家分享！<br>参加学术会议，面试求职的各种心得体会，也可以在这里悄悄与大家分享！</p><p>愿少年，乘风破浪，他日不忘化雨功！</p>]]></content>
    
    
    <categories>
      
      <category>说点心里话</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈梦呓</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
